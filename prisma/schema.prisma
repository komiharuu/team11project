// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userInfo     UserInfo?
  refreshToken RefreshToken?

  posts    Post[]
  comments Comment[]

  @@map("user")
}

model UserInfo {
  userInfoId    Int      @id @default(autoincrement())
  userId        Int      @unique
  name          String
  introduce     String
  profileImgurl String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId])

  @@map("userInfo")
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  refresh_token String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [userId])


  @@map("refreshtoken")
}

model Post {
  postId               Int      @id @default(autoincrement())
  userId               Int
  recommendedArea      String
  recommendationReason String   @db.Text
  imageurl             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [userId])
  comments Comment[]

  @@map("post")
}

model Comment {
  commentId Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [postId])
  user User @relation(fields: [userId], references: [userId])

  @@map("comment")
}

model Email {
  verificationCode Int @unique
  email            String
  createdAt DateTime @default(now())

  @@map("email")
}